{"version":3,"sources":["services/movies-api.js","components/SearchError/SearchError.js","views/MoviesPage/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Error","fetchTrendingMovies","fetchQueryMovies","query","fetchMovieDetailsById","movieId","fetchMovieActors","fetchMovieReviews","SearchError","message","role","Status","MoviesPage","useState","setQuery","input","setInput","movies","setMovies","status","setStatus","error","setError","queryInputId","shortid","generate","reset","useEffect","then","data","results","catch","onSubmit","event","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","name","value","onChange","currentTarget","toLowerCase","id","map","movie","to","title","release_date","slice","autoClose"],"mappings":"gVAAMA,EAAW,+BACXC,EAAU,mC,SAEDC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAwD,GAAxD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIM,IAAIC,MAAM,2CAJhB,oF,sBAOO,SAASC,IACd,OAAOT,EAAuB,GAAD,OAAIF,EAAJ,uCAA2CC,IAGnE,SAASW,EAAiBC,GAC/B,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,iCAAqCC,EAArC,iCAAqEY,EAArE,gCAGxB,SAASC,EAAsBC,GACpC,OAAOb,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,oBAAyCd,EAAzC,oBAGxB,SAASe,EAAiBD,GAC/B,OAAOb,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,4BAAiDd,EAAjD,oBAGxB,SAASgB,EAAkBF,GAChC,OAAOb,EAAuB,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,4BAAiDd,EAAjD,6B,2CCbhBiB,IAZf,YAAmC,IAAZC,EAAW,EAAXA,QACrB,OACE,qBAAKC,KAAK,QAAV,SACE,4BAAID,Q,iKCGJE,EACE,OADFA,EAEM,WAFNA,EAGM,WAGG,SAASC,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAA4BH,mBAAS,IAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA4BL,mBAASF,GAArC,mBAAOQ,EAAP,KAAeC,EAAf,KACA,EAA0BP,mBAAS,MAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KACMC,EAAeC,IAAQC,WAkBvBC,EAAQ,WACZV,EAAS,KAqBX,OAlBAW,qBAAU,WACHxB,GAILD,YAAiBC,GACdyB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAClBF,MAAK,SAAAE,GACJZ,EAAUY,GACVV,EAAUT,MAEXoB,OAAM,SAAAV,GACLC,EAASD,GACTD,EAAUT,QAEb,CAACR,IAIF,qCACA,uBAAM6B,SAnCa,SAAAC,GACnBA,EAAMC,iBAEe,KAAjBnB,EAAMoB,QAIVrB,EAASC,GACTW,KAJEU,IAAMf,MAAM,6BA+Bd,UACE,uBACEgB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,QACLC,MAAO3B,EACP4B,SAhDe,SAAAV,GACnBb,EAAUT,GACVK,EAASiB,EAAMW,cAAcF,MAAMG,gBA+C/BC,GAAIvB,IAEN,wBAAQc,KAAK,SAAb,uBAGDlB,IAAWR,GAAmB,cAAC,IAAD,CAAaF,QAASY,EAAMZ,UAC1DU,IAAWR,GACZ,6BACGM,EAAO8B,KAAI,SAACC,GAAD,OACZ,6BACE,eAAC,IAAD,CAAMC,GAAE,iBAAYD,EAAMF,IAA1B,UACCE,EAAME,MADP,IACeF,EAAMG,cAAgB,yCAAIH,EAAMG,aAAaC,MAAM,EAAG,GAAhC,WAF9BJ,EAAMF,SAQjB,cAAC,IAAD,CAAgBO,UAAW","file":"static/js/movies-page.bc8d8c62.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst API_KEY = '531a27e0122c94d8ab2e66598c1071a6';\r\n\r\nasync function fetchWithErrorHandling(url = '', config ={}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok \r\n    ? await response.json() \r\n    : new Error('Possibly server error, please try again');\r\n}\r\n\r\nexport function fetchTrendingMovies() {\r\n  return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n}\r\n\r\nexport function fetchQueryMovies(query) {\r\n  return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\r\n}\r\n\r\nexport function fetchMovieDetailsById(movieId) {\r\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\r\n}\r\n\r\nexport function fetchMovieActors(movieId) {\r\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\r\n}\r\n\r\nexport function fetchMovieReviews(movieId) {\r\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\r\n}\r\n\r\n\r\n// export const fetchMovies = async function() {\r\n//   return fetch(\r\n//     `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\r\n//   ).then(response => {\r\n//     if (response.ok) {\r\n//       return response.json();\r\n//     };\r\n\r\n//     return Promise.reject(\r\n//       new Error('Possibly server error, please try again'),\r\n//     );\r\n//   });\r\n// };","import PropTypes from 'prop-types';\r\n\r\nfunction SearchError({ message }) {\r\n  return (\r\n    <div role=\"alert\">\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchError.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SearchError;","import { useState, useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport shortid from 'shortid';\r\nimport { fetchQueryMovies } from '../../services/movies-api';\r\nimport SearchError from '../../components/SearchError/SearchError';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Status = {\r\n  IDLE: 'idle',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\n\r\nexport default function MoviesPage() {\r\n  const [query, setQuery] = useState('');\r\n  const [input, setInput] = useState('')\r\n  const [movies, setMovies] = useState([]);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [error, setError] = useState(null);\r\n  const queryInputId = shortid.generate();\r\n\r\n  const handleChange = event => {\r\n    setStatus(Status.IDLE);\r\n    setInput(event.currentTarget.value.toLowerCase());\r\n  }\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (input.trim() === '') {\r\n      toast.error('Please, enter your query');\r\n      return;\r\n    }\r\n    setQuery(input);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setInput('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    fetchQueryMovies(query)\r\n      .then(data => data.results)\r\n      .then(results => {\r\n        setMovies(results);\r\n        setStatus(Status.RESOLVED);\r\n      })\r\n      .catch(error => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [query])\r\n\r\n\r\n  return (\r\n    <>\r\n    <form onSubmit={handleSubmit}> \r\n      <input \r\n        type=\"text\"\r\n        autoComplete=\"off\"\r\n        autoFocus\r\n        placeholder=\"Search movies\"\r\n        name=\"input\"\r\n        value={input}\r\n        onChange={handleChange}\r\n        id={queryInputId}\r\n      />\r\n      <button type=\"submit\">Search</button>\r\n    </form>\r\n\r\n    {status === Status.REJECTED && <SearchError message={error.message} />}\r\n    {status === Status.RESOLVED && \r\n    <ul>\r\n      {movies.map((movie) =>\r\n      <li key={movie.id}>\r\n        <Link to={`movies/${movie.id}`}>\r\n        {movie.title} {movie.release_date && <>({movie.release_date.slice(0, 4)})</>}\r\n          </Link>\r\n        </li>)}\r\n    </ul>\r\n    }\r\n    \r\n    <ToastContainer autoClose={5000} />\r\n    </>\r\n\r\n    \r\n    // <div>Hi, I'm MoviesPage</div>\r\n  )\r\n}\r\n"],"sourceRoot":""}